<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo+Next+github搭建博客</title>
    <url>/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>个人博客是用Hexo微博框架+Next主题搭建的，然后把搭建的博客放在Github Pages上。现在把搭建的过程，遇到的问题，简单操作记录下来。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol>
<li>Node.js</li>
<li>Git</li>
</ol>
<p>Hexo博客框架基于Node.js，下载<a href="http://nodejs.cn/download/">Node.js</a>, 更改安装目录，一路next至安装成功。</p>
<p>Git用于部署代码到github上，下载<a href="https://gitforwindows.org/">Git</a></p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote>
<p>说明：在git bash中操作命令行。</p>
</blockquote>
<ol>
<li>本地创建blog文件夹，打开git bash，进入该文件夹。</li>
<li>安装命令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建hexo文件夹, 并初始化</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>基本配置。修改hexo/_config.yml中网站参数。</li>
</ol>
<img src="/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210919201210.png" class="">

<ol start="5">
<li>启动命令,登录localhost:4000，就可以看到生成的博客了。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<img src="/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/QQ%E5%9B%BE%E7%89%8720210919200358.png" class="">

<h1 id="hexo部署到Github"><a href="#hexo部署到Github" class="headerlink" title="hexo部署到Github"></a>hexo部署到Github</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<ul>
<li>hexo clean清除了你之前生成的东西，也可以不加。</li>
<li>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写</li>
<li>hexo deploy 部署文章，可以用hexo d缩写</li>
</ul>
<img src="/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/QQ%E5%9B%BE%E7%89%8720210919205138.png" class="">

<p>部署过成功中如果是链接不到远程仓库，可能是因为没有SSH，生成SSH：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;   #一路回车</span><br></pre></td></tr></table></figure>

<p>把id_rsa.pub里面的信息复制到github中去。</p>
<h1 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h1><ol>
<li><p><a href="https://github.com/theme-next/hexo-theme-next">Next下载</a>, 用git clone命令，或者直接下载压缩包，并解压到themes/next文件夹。</p>
</li>
<li><p>测试主题,并登录<a href="http://localhost:4000查看。">http://localhost:4000查看。</a></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>配置Next主题</p>
</li>
<li><p>网站图标设置</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">small: /images/favicon-16x16-next.png  # 即为网站图标</span><br><span class="line">medium: /images/favicon-32x32-next.png</span><br><span class="line">apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">safari_pinned_tab: /images/logo.svg</span><br><span class="line">#android_manifest: /images/manifest.json</span><br><span class="line">#ms_browserconfig: /images/browserconfig.xml	</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>网站页脚小心心定义</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line"># Specify the date when the site was setup.</span><br><span class="line"># If not defined, current year will be used.</span><br><span class="line">#since: 2015</span><br><span class="line"></span><br><span class="line"># Icon between year and copyright info.</span><br><span class="line">icon:</span><br><span class="line"># Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons</span><br><span class="line"># `heart` is recommended with animation in red (#ff0000).</span><br><span class="line">name: heart</span><br><span class="line"># If you want to animate the icon, set it to true.</span><br><span class="line">animated: true</span><br><span class="line"># Change the color of icon, using Hex Code.</span><br><span class="line">color: &quot;#ff0000&quot;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>关闭底部由hexo强力驱动</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powered:</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  enable: false</span><br><span class="line">  # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">  version: false</span><br><span class="line"></span><br><span class="line">theme:</span><br><span class="line">  # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">  enable: false</span><br><span class="line">  # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">  version: false</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>菜单栏设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true  #表示是否显示菜单图标icons</span><br><span class="line">  badges: false  # 显示每个菜单下面有多少个内容</span><br></pre></td></tr></table></figure>

<p>about、tags、categories取消注释，创建者三个菜单页面.</p>
<ul>
<li>新建：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">cd source/categories/index.md</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑保存md文件：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li>部署(看不到标签、分类时就是因为没有部署或者md文件的type不对)：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>

<p>about和tags同理。</p>
<ol start="5">
<li>Next主题四种风格设置 （<a href="https://blog.csdn.net/qq_42185634/article/details/102992499">四种布局</a>）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>社交链接设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#social:</span><br><span class="line">  #GitHub: https://github.com/yourname || github</span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>友情链接设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: Links</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">#links:</span><br><span class="line">  #Title: http://example.com/</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>侧边栏设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  # 此处设置只适用于Pisces或者Gemini风格</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # 侧边栏如何展示</span><br><span class="line">  display: post    # 侧边栏在打开文章的时候显示</span><br><span class="line">  #display: always  # 侧边栏不管在哪都显示</span><br><span class="line">  #display: hide    # 隐藏侧边栏</span><br><span class="line">  #display: remove  # 移除侧边栏</span><br><span class="line"></span><br><span class="line">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  offset: 12</span><br><span class="line"></span><br><span class="line">  # 设置返回页面顶部设置，只适用于Pisces或者Gemini风格，建议开启</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # 显示浏览百分比，建议开启</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">  # Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class="line">  onmobile: false</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>文章元数据设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true  # 创建于</span><br><span class="line">  updated_at:</span><br><span class="line">    enabled: false</span><br><span class="line">    # If true, show updated date label only if `updated date` different from &#x27;created date&#x27; (post edited in another day than was created).</span><br><span class="line">    # And if post will edited in same day as created, edited time will show in popup title under created time label.</span><br><span class="line">    # If false show anyway, but if post edited in same day, show only edited time.</span><br><span class="line">    another_day: true</span><br><span class="line">  categories: true  #分类</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>文章字数统计设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>侧边栏头像设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # in theme directory(source/images): /images/avatar.gif</span><br><span class="line">  # in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url:  # 此处是头像的地址</span><br><span class="line">  # If true, the avatar would be dispalyed in circle. </span><br><span class="line">  rounded: true   # 设置头像是否为圆形</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1    # 设置不透明度，1为完全不透明，0为完全透明</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: true   # 设置鼠标放到头像上是否旋转</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>代码块设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Manual define the border radius in codeblock</span><br><span class="line">  # Leave it empty for the default 1</span><br><span class="line">  border_radius: 8   # 按钮圆滑度</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:  # 设置是否开启代码块复制按钮</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result</span><br><span class="line">    show_result: true  # 是否显示复制成功信息</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>代码块风格设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available values: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>开启本地博客搜索功能</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # unescape html strings to the readable one</span><br><span class="line">  unescape: false</span><br></pre></td></tr></table></figure>

<p>注意该搜索功能需要依赖hexo-generator-searchdb插件，依然还是使用命令npm install hexo-generator-searchdb –save来进行安装。然后 在hexo站点根目录的末尾，加入以下代码即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<h1 id="git分支进行多终端工作"><a href="#git分支进行多终端工作" class="headerlink" title="git分支进行多终端工作"></a>git分支进行多终端工作</h1><p>适用于更换电脑更新博客时使用，自己也最好一直维护好线上的源代码。</p>
<h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的.deploy_git里面。其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p>
<img src="/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210919203650.png" class="">

<h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><p>在github上新建hexo分支，将这个分支设为默认分支，git clone到本地。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:xqrshine/xqrshine.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后删除.git以外的所有文件。把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>

<p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了。</p>
<p>然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure>

<p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p>
<img src="/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210919204219.png" class="">


<h3 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h3><p>安装git，Nodejs，hexo, 从分支git clone源代码到本地。然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd xxx.github.io</span><br><span class="line"># hexo init  # 此时不用初始化，因为源代码已经初始化了</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>接下来就可以写文章了。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>常用命令</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p><code>hexo new [layout] &lt;title&gt;</code> 新建文章, 生成md文件，标题含空格时用引号括起来</p>
<p>layou布局，是指文件的不同保存路径:</p>
<ul>
<li>post：source/_posts/</li>
<li>page: source</li>
<li>draft: source/_drafts</li>
</ul>
<img src="/2021/09/19/hexo-Next-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210919210812.png" class="">



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;title 1&quot;  # 生成source/_posts/title-1.md 文件, 文件名和标题同名。</span><br><span class="line">hexo new page --path about/me &quot;About me&quot;  # 指定路径，生成source/about/me.md文件，文章的标题为“About me ”。</span><br><span class="line">hexo new page --path about/me  # 指定路径 不指定title， 生成source/about/me.md文件，文章的标题为&quot;page&quot;. 这个命令不可取</span><br></pre></td></tr></table></figure>

<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p><code>hexo generate</code>, <code>hexo g</code> 生成静态文件。</p>
<p><code>hexo g -d</code> 文件生成后立即部署网站。</p>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p><code>hexo publish [layout] &lt;filename&gt;</code> 发表草稿</p>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p><code>hexo deploy</code>, <code>hexo d</code> 部署。只要做出修改，就必须生成-部署。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><code>hexo clean</code> 清除缓存文件（db.json）和已经生成的静态文件（publish），在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p> <a href="https://github.com/boboidream/hexo-easy-images">npm i hexo-easy-images -s</a>：</p>
]]></content>
  </entry>
  <entry>
    <title>python常用内建模块</title>
    <url>/2021/09/29/python%E5%B8%B8%E7%94%A8%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="collections-容器数据类型"><a href="#collections-容器数据类型" class="headerlink" title="collections - 容器数据类型"></a>collections - 容器数据类型</h1><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p>
<h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h2><p><code>namedtuple</code>是一个函数，用来创建一个自定义的<code>tuple</code>对象，并且规定了<code>tuple</code>对象属性的个数。<code>namedtuple</code>可以很方便地定义一种数据类型，它具有tuple的不变性，又可以根据属性来引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证创建的`Point`对象是`tuple`的一个子类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(p, Point)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(p, <span class="built_in">tuple</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># namedtuple(&#x27;名称&#x27;, [属性list]) 创建具有三个属性的`tuple`对象</span></span><br><span class="line">Circle = namedtuple(<span class="string">&#x27;Circle&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p><code>deque</code>是为了高效实现插入和删除操作的<strong>双向列表</strong>，适合用于队列和栈。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>deque([iterable[, maxlen]])</td>
<td>定义deque对象</td>
<td></td>
<td></td>
</tr>
<tr>
<td>append(x)</td>
<td>添加x到右端</td>
<td></td>
<td></td>
</tr>
<tr>
<td>appendleft(x)</td>
<td>添加x到左端</td>
<td></td>
<td></td>
</tr>
<tr>
<td>extend(iterable)</td>
<td>扩展右端</td>
<td></td>
<td></td>
</tr>
<tr>
<td>extendleft(iterable)</td>
<td>扩展左端，（添加时，结果中iterable参数中的顺序将被反过来添加）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>insert(i, x)</td>
<td>在位置 i 插入 x ，如果 i  超出maxlen的话，引发IndexError.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>pop</td>
<td>弹出最右端的一个元素，如果没有元素的话，引发IndexError.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>popleft</td>
<td>弹出最左端的一个元素，如果没有元素的话，引发IndexError.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>remove(value)</td>
<td>移除找到的第一个value，如果没有的话，引发ValueError.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>clear()</td>
<td>移除所有元素，使其长度为0.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>copy()</td>
<td>创建一份浅copy (传递子对象的引用)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>count(x)</td>
<td>计算deque中元素等于x的个数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>reverse()</td>
<td>将deque逆序排列，返回None</td>
<td></td>
<td></td>
</tr>
<tr>
<td>rotate(n=1)</td>
<td>向右循环移动n步, 如果n是负数，就向左循环。 如果deque不是空的，向右循环移动一步就等价于d.appendleft(d.pop)); 向左循环一步就等价于d.append(d.popleft)).</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>其他方法和属性</th>
<th>含义</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>maxlen属性</td>
<td>deque的最大尺寸，如果没有限定的haul，就是None</td>
<td></td>
</tr>
<tr>
<td>迭代</td>
<td>for elem in deque:</td>
<td></td>
</tr>
<tr>
<td>len(d)</td>
<td>队列长度（元素个数）</td>
<td></td>
</tr>
<tr>
<td>resersed(d)</td>
<td>逆序排列，同d.reverse()</td>
<td></td>
</tr>
<tr>
<td>copy.copy(d)</td>
<td>浅拷贝，同d.copy()</td>
<td></td>
</tr>
<tr>
<td>copy.deepcopy(d)</td>
<td>深拷贝</td>
<td></td>
</tr>
<tr>
<td>in</td>
<td>成员检测</td>
<td></td>
</tr>
<tr>
<td>d[ i ]</td>
<td>下标访问元素</td>
<td></td>
</tr>
</tbody></table>
<h2 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h2><p> <code>defaultdict</code>是一个新的类似字典的对象，是内置<code>dict</code>的子类。</p>
<p>本对象包含一个名为 <code>default_factory</code> 的属性，如果构造对象时提供了第一个参数，则本属性会被初始化成那个参数，如果未提供第一个参数，则本属性为 None。所有其他参数（包括关键字参数）都相当于传递给 dict 的构造函数。</p>
<p>例：使用 list 作为 default_factory，很轻松地将（键-值对组成的）序列转换为（键-列表组成的）字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [(<span class="string">&#x27;yellow&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line">d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line">    d[k].append(v)</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(d.items())</span><br><span class="line"><span class="comment"># [(&#x27;blue&#x27;, [2, 4]), (&#x27;red&#x27;, [1]), (&#x27;yellow&#x27;, [1, 3])]</span></span><br></pre></td></tr></table></figure>

<p>设置 default_factory 为 int，使 defaultdict 用于计数（类似其他语言中的 bag 或 multiset）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;mississippi&#x27;</span></span><br><span class="line">d = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    d[k] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(d.items())</span><br><span class="line"><span class="comment"># [(&#x27;i&#x27;, 4), (&#x27;m&#x27;, 1), (&#x27;p&#x27;, 2), (&#x27;s&#x27;, 4)]</span></span><br></pre></td></tr></table></figure>

<p>设置 default_factory 为 set 使 defaultdict 用于构建 set 集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [(<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">4</span>)]</span><br><span class="line">d = defaultdict(<span class="built_in">set</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line">    d[k].add(v)</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(d.items())</span><br><span class="line"><span class="comment"># [(&#x27;blue&#x27;, &#123;2, 4&#125;), (&#x27;red&#x27;, &#123;1, 3&#125;)]</span></span><br></pre></td></tr></table></figure>

<h2 id="OrderDict"><a href="#OrderDict" class="headerlink" title="OrderDict"></a>OrderDict</h2><p>使用<code>dict</code>时，Key是无序的。在对<code>dict</code>做迭代时，我们无法确定Key的顺序。如果要保持Key的顺序，可以用<code>OrderedDict</code>.注意，<code>OrderedDict</code>的Key会<strong>按照插入的顺序排列</strong>，不是Key本身排序：</p>
<h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p><code>Counter</code>是一个简单的计数器，例如，统计字符出现的个数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter()</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;programming&#x27;</span>:</span><br><span class="line">    c[ch] = c[ch] + <span class="number">1</span></span><br><span class="line"><span class="comment"># Counter(&#123;&#x27;g&#x27;: 2, &#x27;m&#x27;: 2, &#x27;r&#x27;: 2, &#x27;a&#x27;: 1, &#x27;i&#x27;: 1, &#x27;o&#x27;: 1, &#x27;n&#x27;: 1, &#x27;p&#x27;: 1&#125;)</span></span><br><span class="line">c.update(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 也可以一次性update</span></span><br><span class="line"><span class="comment"># Counter(&#123;&#x27;r&#x27;: 2, &#x27;o&#x27;: 2, &#x27;g&#x27;: 2, &#x27;m&#x27;: 2, &#x27;l&#x27;: 2, &#x27;p&#x27;: 1, &#x27;a&#x27;: 1, &#x27;i&#x27;: 1, &#x27;n&#x27;: 1, &#x27;h&#x27;: 1, &#x27;e&#x27;: 1&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Counter(<span class="string">&#x27;cbasbc&#x27;</span>))</span><br><span class="line"><span class="comment"># Counter(&#123;&#x27;c&#x27;: 2, &#x27;b&#x27;: 2, &#x27;a&#x27;: 1, &#x27;s&#x27;: 1&#125;)</span></span><br></pre></td></tr></table></figure>

<h1 id="hashlib-安全哈希和消息摘要"><a href="#hashlib-安全哈希和消息摘要" class="headerlink" title="hashlib - 安全哈希和消息摘要"></a>hashlib - 安全哈希和消息摘要</h1><p>Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。摘要算法又称哈希算法、散列算法。它通过一个函数，<strong>把任意长度的数据转换为一个长度固定的数据串</strong>（通常用16进制的字符串表示）。</p>
<p>摘要算法就是通过摘要函数<code>f()</code>对任意长度的数据<code>data</code>计算出固定长度的摘要<code>digest</code>，目的是为了发现原始数据是否被人篡改过。</p>
<p>摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个<strong>单向函数</strong>，计算<code>f(data)</code>很容易，但通过<code>digest</code>反推<code>data</code>却非常困难。而且，对原始数据做一个<code>bit</code>的修改，都会导致计算出的摘要完全不同。</p>
<p><strong>MD5</strong>是最常用的摘要算法，速度很快，生成结果是固定的128bit字节，通常用一个32位的16进制字符串表示。</p>
<p>使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">&quot;how to use md5 in python hashlib?&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># Unicode-objects must be encoded before hashing</span></span><br><span class="line"><span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line"><span class="comment"># d26a53750bc40b38b65a520292f69306</span></span><br></pre></td></tr></table></figure>

<p><strong>SHA1</strong>的结果是160bit字节，通常用一个40位的16进制字符串表示。</p>
<p>使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(<span class="string">&#x27;how to use sha1 in &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># MD5和SHA1都可以分块调用 </span></span><br><span class="line">sha1.update(<span class="string">&#x27;python hashlib?&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line"><span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line"><span class="comment"># 2c76b57293ce30acef38d98f6046927161b46a44</span></span><br></pre></td></tr></table></figure>


<h1 id="math"><a href="#math" class="headerlink" title="math"></a>math</h1><p>数学方法：</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>math.degrees()</td>
<td>Converts an angle(弧度) from radians to degrees</td>
</tr>
<tr>
<td>math.cos()</td>
<td>Returns the cosine of a number</td>
</tr>
<tr>
<td>math.sin()</td>
<td>Returns the sine of a number</td>
</tr>
<tr>
<td>math.sinh()</td>
<td>Returns the hyperbolic sine of a number</td>
</tr>
<tr>
<td>math.tan()</td>
<td>Returns the tangent of a number</td>
</tr>
<tr>
<td>math.tanh()</td>
<td>Returns the hyperbolic tangent of a number</td>
</tr>
<tr>
<td>math.acos()</td>
<td>Returns the arc cosine of a number</td>
</tr>
<tr>
<td>math.asin()</td>
<td>Returns the arc sine of a number</td>
</tr>
<tr>
<td>math.atan()</td>
<td>Returns the arc tangent of a number in radians</td>
</tr>
<tr>
<td>math.fabs()</td>
<td>Returns the absolute value of a number</td>
</tr>
<tr>
<td>math.fmod(x, y)</td>
<td>Returns the remainder of x/y</td>
</tr>
<tr>
<td>math.frexp()</td>
<td>Returns the mantissa and the exponent, of a specified number</td>
</tr>
<tr>
<td>math.fsum()</td>
<td>Returns the sum of all items in any iterable (tuples, arrays, lists, etc.)</td>
</tr>
<tr>
<td>math.gamma()</td>
<td>Returns the gamma function at x</td>
</tr>
<tr>
<td>math.ceil()</td>
<td>ounds a number up to the nearest integer</td>
</tr>
<tr>
<td>math.floor()</td>
<td>Rounds a number down to the nearest integer</td>
</tr>
<tr>
<td>math.trunc()</td>
<td>returns the truncated integer part of a number</td>
</tr>
<tr>
<td>math.sqrt()</td>
<td>Returns the square root of a number</td>
</tr>
<tr>
<td>math.pow()</td>
<td>Returns the value of x to the power of y</td>
</tr>
<tr>
<td>math.gcd()</td>
<td>Returns the greatest common divisor of two integers</td>
</tr>
<tr>
<td>math.prod()</td>
<td>Returns the product of all the elements in an iterable</td>
</tr>
<tr>
<td>math.exp()</td>
<td>Returns E raised to the power of x</td>
</tr>
<tr>
<td>math.log()</td>
<td>Returns the natural logarithm of a number, or the logarithm of number to base</td>
</tr>
<tr>
<td>math.log1p()</td>
<td>Returns the natural logarithm of 1+x</td>
</tr>
<tr>
<td>math.log2()</td>
<td>Returns the base-2 logarithm of x</td>
</tr>
<tr>
<td>math.log10()</td>
<td>Returns the base-10 logarithm of x</td>
</tr>
<tr>
<td>math.isclose()</td>
<td>Checks whether two values are close to each other, or not</td>
</tr>
<tr>
<td>math.isfinite()</td>
<td>Checks whether a number is finite or not</td>
</tr>
<tr>
<td>math.isinf()</td>
<td>Checks whether a number is infinite or not</td>
</tr>
<tr>
<td>math.isnan()</td>
<td>Checks whether a value is NaN (not a number) or</td>
</tr>
</tbody></table>
<p>数学常量：</p>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>math.e</td>
<td>Returns Euler’s number (2.7182…)</td>
</tr>
<tr>
<td>math.inf</td>
<td>Returns a floating-point positive infinity</td>
</tr>
<tr>
<td>math.nan</td>
<td>Returns a floating-point NaN (Not a Number) value</td>
</tr>
<tr>
<td>math.pi</td>
<td>Returns PI (3.1415…)</td>
</tr>
<tr>
<td>math.tau</td>
<td>Returns tau (6.2831…)</td>
</tr>
</tbody></table>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>seed()</td>
<td>Initialize the random number generator</td>
</tr>
<tr>
<td>sample(iteration， k)</td>
<td>Returns a given sample of a sequence</td>
</tr>
<tr>
<td>shuffle()</td>
<td>Takes a sequence and returns the sequence in a random order（随机顺序排序）</td>
</tr>
<tr>
<td>getstate()</td>
<td>Returns the current internal state of the random number generator</td>
</tr>
<tr>
<td>setstate()</td>
<td>Restores the internal state of the random number generator</td>
</tr>
<tr>
<td>randrange(x)</td>
<td>Returns a random number between the given range</td>
</tr>
<tr>
<td>randint(i，j)</td>
<td>Returns a random number between the given range</td>
</tr>
<tr>
<td>random()</td>
<td>Returns a random float number between 0 and 1</td>
</tr>
<tr>
<td>uniform()</td>
<td>Returns a random float number between two given parameters(基于均匀分布的浮点数)</td>
</tr>
<tr>
<td>expovariate()</td>
<td>Returns a random float number based on the Exponential distribution (used in statistics) （指数分布）</td>
</tr>
<tr>
<td>gammavariate()</td>
<td>Returns a random float number based on the Gamma distribution (used in statistics) （gamma分布）</td>
</tr>
<tr>
<td>gauss()</td>
<td>Returns a random float number based on the Gaussian distribution (used in probability theories)（高斯分布）</td>
</tr>
<tr>
<td>lognormvariate()</td>
<td>Returns a random float number based on a log-normal distribution (used in probability theories) （对数正态分布）</td>
</tr>
<tr>
<td>normalvariate()</td>
<td>Returns a random float number based on the normal distribution (used in probability theories)（正态分布）</td>
</tr>
<tr>
<td>vonmisesvariate()</td>
<td>Returns a random float number based on the von Mises distribution (used in directional statistics)von Mises分布</td>
</tr>
<tr>
<td>paretovariate()</td>
<td>Returns a random float number based on the Pareto distribution (used in probability theories) 帕累托分布</td>
</tr>
<tr>
<td>weibullvariate()</td>
<td>Returns a random float number based on the Weibull distribution (used in statistics)Weibull分布</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#print a random number:</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#capture the state:</span></span><br><span class="line">state = random.getstate()</span><br><span class="line"></span><br><span class="line"><span class="comment">#print another random number:</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#restore the state:</span></span><br><span class="line">random.setstate(state)</span><br><span class="line"></span><br><span class="line"><span class="comment">#and the next random number should be the same as when you captured the state:</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.5723668016858915</span><br><span class="line">0.88231723987879</span><br><span class="line">0.88231723987879</span><br></pre></td></tr></table></figure>


<h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h1 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h1><h1 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h1><h1 id="tarfile"><a href="#tarfile" class="headerlink" title="tarfile"></a>tarfile</h1><p>作用：用来读写tar归档。包括使用gzip, bz2 和 lzma压缩的归档。</p>
<ol>
<li>tarfile.open(name=None, mode=’r’, fileobj=None, bufsize=10240, **kwargs)</li>
</ol>
<p>打开一个TarFile类型的文件对象。</p>
<ul>
<li><code>name</code> 文件名或路径.</li>
<li><code>bufsize</code> 指定数据块的大小，默认为20*512字节.</li>
<li><code>mode</code> 打开模式.(读r, 写w, 打包x)</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‘r’ or ‘r:*’</td>
<td>自动解压并打开文件（推荐模式）</td>
</tr>
<tr>
<td>‘r:’</td>
<td>只打开文件不解压</td>
</tr>
<tr>
<td>‘r:gz’</td>
<td>采用gzip格式解压并打开文件</td>
</tr>
<tr>
<td>‘r:bz2’</td>
<td>采用bz2格式解压并打开文件</td>
</tr>
<tr>
<td>‘r:xz’</td>
<td>采用lzma格式解压并打开文件</td>
</tr>
<tr>
<td>‘x’ or ‘x:’</td>
<td>仅创建打包文件，不压缩</td>
</tr>
<tr>
<td>‘x:gz’</td>
<td>采用gzip方式压缩并打包文件</td>
</tr>
<tr>
<td>‘x:bz2’</td>
<td>采用bzip2方式压缩并打包文件</td>
</tr>
<tr>
<td>‘x:xz’</td>
<td>采用lzma方式压缩并打包文件</td>
</tr>
<tr>
<td>‘a’ or ‘a:’</td>
<td>打开文件，并以不压缩的方式追加内容。如果文件不存在，则创建</td>
</tr>
<tr>
<td>‘w’ or ‘w:’</td>
<td>以不压缩的方式写入</td>
</tr>
<tr>
<td>‘w:gz’</td>
<td>以gzip的方式压缩并写入</td>
</tr>
<tr>
<td>‘w:bz2’</td>
<td>以bzip2的方式压缩并写入</td>
</tr>
<tr>
<td>‘w:xz’</td>
<td>以lzma的方式压缩并写入</td>
</tr>
</tbody></table>
<p>如果当前的模式不能正常打开文件用于读取，将抛出<code>ReadError</code>异常，这种情况下，使用<code>&quot;r&quot;</code>模式。如果指定的压缩方式不支持，将抛出<code>CompressionError</code>异常。</p>
<p>对于 <code>&#39;w:gz&#39;, &#39;r:gz&#39;, &#39;w:bz2&#39;, &#39;r:bz2&#39;, &#39;x:gz&#39;, &#39;x:bz2&#39;</code> 等模式，tarfile.open() 接受关键字参数 <code>compresslevel (默认值为 9)</code> 来指定文件的压缩等级。</p>
<ol start="2">
<li>TarFile.add(name) </li>
</ol>
<p>将指定文件加入包内.</p>
<ol start="3">
<li>TarFile.close()</li>
</ol>
<p>关闭TarFile文件，在<code>w</code>模式下，会在文件末尾添加量个zero块.</p>
<ol start="4">
<li>TarFile.getmembers()</li>
</ol>
<p>获取包内所有成员的信息.</p>
<ol start="5">
<li>TarFile.getmember()</li>
</ol>
<p>获取包内某个成员的信息.</p>
<ol start="6">
<li>TarFile.getnames()</li>
</ol>
<p>获取包内所有成员的名字.</p>
<ol start="7">
<li>TarFile.list() </li>
</ol>
<p>列表显示包内成员的信息.</p>
<h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><h1 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a>zipfile</h1><p>ZIP是通用的归档和压缩格式。zipfile模块提供了通用的创建、读取、写入、附加和显示压缩文件的方法。</p>
<ol>
<li>zipfile.ZipFile(name, mode)</li>
</ol>
<p>模块最重要的类，用于读写ZIP文件.</p>
<ol start="2">
<li>ZipFile.write(filepath)</li>
</ol>
<p>将文件写入压缩文件. <code>z.write(r&quot;d:\test\1.txt&quot;) # 注意路径的写法</code></p>
<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h1 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h1><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h1 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a>PIL</h1><h1 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import function as F</span><br><span class="line">from torch.utils import data</span><br></pre></td></tr></table></figure>
<h1 id="torchvison"><a href="#torchvison" class="headerlink" title="torchvison"></a>torchvison</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torchvision</span><br><span class="line">from torchvision import transforms</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python创建虚拟环境及jupyter启动</title>
    <url>/2021/10/12/python%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8F%8Ajupyter%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>python创建虚拟环境<code>python3 -m venv path/虚拟环境名称</code></p>
<p>安装jupyter<code>pip install jupyter notebook</code></p>
<p>虚拟环境添加到jupyter的kernel<code>python -m ipykernel install --user --name 虚拟环境名称 --display-name “虚拟环境名称”</code></p>
<p>启动jupyter<code>jupyter notebook</code>、<code>nohup jupyter notebook &amp;</code>（后台运行，即使关闭浏览器或者断网都不影响程序的运行）。</p>
<p>查找jupyter进程<code>ps -aux |grep jupyter</code></p>
<p>关闭后台jupyter进程<code>kill -9 PID</code></p>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>css224 1-Introduction and Word Vectors</title>
    <url>/2021/10/15/css224-1-Introduction-and-Word-Vectors/</url>
    <content><![CDATA[<p>本讲的关键内容包括NLP的介绍、Word Vectors词向量、SVD、Skip-gram、CBOW、Negative sampling负采样、Hierarchical Softmax分层softmax、Word2Vec.</p>
<h1 id="传统表示"><a href="#传统表示" class="headerlink" title="传统表示"></a>传统表示</h1><ul>
<li>one hot</li>
<li>词袋</li>
<li>基于窗口的共现矩阵</li>
</ul>
<h1 id="基于迭代的Word2Vec"><a href="#基于迭代的Word2Vec" class="headerlink" title="基于迭代的Word2Vec"></a>基于迭代的Word2Vec</h1><p><strong>分布式表示</strong>：用单词的上下文表示单词, 即<code>word vectors</code>,有时<code>word vectors</code>也称为<code>word embedding</code> 或 <code>word representations</code>,他们是一个分布式表示.</p>
<p>Word2Vec 包括：<br>    - <strong>两种算法：</strong> CBOW和Skip-gram. CBOW的目标是从周围上下文预测中心单词的词向量。Skip-gram是由中心单词预测周围单词的分布（概率）。<br>    - <strong>两种训练方法：</strong> 负采样和分层softmax. 负采样通过负样本进行采样来定义目标.分层softmax使用有效的树结构来计算词汇次表的概率来定义目标.</p>
<p>idea:<br>    - 有一个大的文本语料库.<br>    - 固定词汇表中的每个单词都由一个向量表示.<br>    - 浏览文本中的每个位置t，有一个中心词c和上下文（“外部”）词o.<br>    - 使用c和o的词向量的相似性来计算给定c的概率o（或反之亦然）.<br>    - 不断调整词向量以最大化该概率.</p>
<h2 id="语言模型（Unigrams-Bigrams-etc-）"><a href="#语言模型（Unigrams-Bigrams-etc-）" class="headerlink" title="语言模型（Unigrams, Bigrams, etc.）"></a>语言模型（Unigrams, Bigrams, etc.）</h2><p>首先，我们需要创建一个为一个序列中tokens赋予概率的模型。如：</p>
<center>"The cat jumped over the puddle."</center>

<p>一个好的语言模型会给这个句子很大的概率，因为这是一个在句法和语义是哪个都完全有效的句子。类似地，”stock boil fish is toy”应该有一个很小的概率，因为这是一个无意义的句子。从数学上讲，我们可以将这个概率称为任意给定的n个单词序列：</p>
<p>$$P(w_1,w_2,…,w_n)$$</p>
<p>我们可以采用一元语言模型方法，假设单词出现完全独立来分解这个概率：</p>
<p>$$P(w_1,w_2,…,w_n)=\prod_{i=1}^{n} {P(w_i)}$$</p>
<p>但是我们知道下一个单词在很大程度上取决于前一个单词序列。我们让序列的概率取决于序列中一个单词和它旁边的单词的成对概率。我们称之为二元模型，并将其表示为：</p>
<p>$$P(w_1,w_2,…,w_n)=\prod_{i=1}^{n} {P(w_i)|P(w_{i-1})}$$</p>
<p>同样，这当然有点天真，因为我们只关注相邻的单词对，而不是评估整个句子。但正如我们将看到的，这种表达方式让我们走得相当远。注意，在字词矩阵的大小为1的上下文中，我们基本上可以学习这些成对概率。但同样，这需要计算和存储有关大规模数据集的全局信息。现在，我们已经了解了如何考虑具有概率的tokens序列，让我们观察一些可以了解这些概率的示例模型</p>
<h2 id="CBOW"><a href="#CBOW" class="headerlink" title="CBOW"></a>CBOW</h2><p>首先，我们设置已知参数,由一个one hot 向量表示句子。输入的one hot 向量和上下文我们将用$x^{(c)}$ 表示，输出用$y^{(c)}$ 表示，因为在CBOW中我们只有一个输出向量，因此我们称之为$y$，它是已知中心单词的一个ont hot 向量。</p>
<p>现在定义模型中的未知数.创建两个矩阵，$V\in R^{n\times |V|}$ 和 $U\in R^{|V|\times n}$. </p>
<p>$n$ :任意大小的嵌入向量空间.<br>$V$ :输入单词矩阵，它的第i列是单词$w_i$的n维词向量.<br>$v_i$ :$n\times 1$ 的向量, $V$的第i列.<br>$U$ :输出单词矩阵，它的第i行是单词$w_i$的n维词向量.<br>$u_j$ :$U$的第i行.</p>
<p>事实上，我们确实为每个单词学习了两个向量（即输入字向量 $v_i$和输出字向量$u_i$.</p>
<p>模型工作流程：</p>
<ol>
<li>We generate our <strong>one hot word vectors</strong> for the input context of size$m:(x^{c-m},\dots ,x^{c-1}, x^{c+1},\dots, x^{c+m}\in R^{|V|})))$.</li>
<li>We get our embedded word vectors for the context $(v_{c-m} = Vx^{(c-m)}, v_{c-m+1} = Vx^{(c-m+1)}, . . ., v_{c+m} = Vx^{(c+m)} \in R^n)<br>$。</li>
<li>Average these vectors to get$\hat v = \frac{v_{c-m} + v_{c-m+1} + \dots + v_{c+m}}{2m} \in R^n$.</li>
<li>Generate a score vector$z = U\hat v \in R^{|V|}$。As the dot product of similar vectors is higher, it will push similar words close to each other in order to achieve a high score.</li>
<li>Turn the scores into probabilities$\hat y = softmax(z)\in R^{|V|}$。</li>
<li>We desire our probabilities generated, $\hat y = R^{|V|}<br>$, to match the true probabilities, $y = R^{|V|}$, which also happens to be the one hot vector of the actual word。</li>
</ol>
]]></content>
      <tags>
        <tag>css224</tag>
      </tags>
  </entry>
</search>
